 Lambda Delta

 extension of lambda-calculus with definitions

   in Haskell
     simple type lambda calculus
     one can explain -definitions- in term of abstraction and application
     
   with dependent types this is not possible

 ([x : Nat ] f x) 0   --->   f 0

     let x : Nat = 0
     in f x 

 [x : Nat = 0] f x    ----> f 0


-----------------

 If  P : Nat -> U and  g : P 0 -> P 0

 [x : Nat = 0] [y : P x] g y    is typed correct

 ([x : Nat] [y : P x] g y) 0     is -not- typed correct since

 [x : Nat = 0] [y : P x] g y     is not typed correct



--------------------

      [ x : Nat] [ y : Nat ] [x : Bool] ... x....



 G =  [x : Nat] [y : Nat = x] [z: Bool]

 G context

 in this context   y reduces to x


 G' =  [x : Nat] [y : Nat = x] [x : Bool]

 we cannot write y reduces to  x   delta-reduction
 since x  in G' only means the x of type Bool and y is of type Nat


 So we should not allow G'

 But we should allow   [x : Nat] [f : Nat -> Nat = [z:Nat]z]  [z:Bool]

 The z inside the definition of y  is bound

 Definitions + Dependent types


Give name to conversion    beta-eta-delta

 beta  for beta-conversion

 eta   for eta-conversion

 delta for conversion up to definition

 Presentation with -names-

  A,M ::=   x |  M M  | [x:A]M   |  Def M   |   U    -- note that each variable is decorated with its type
  Def   ::=   x : A = M

 A declaration is [x:A]  or  [x:A=M]

 We think of N[x:A=M] as    let x:A=M in N    or   N where x:A=M

 Thus   N[x1:A1=M1][x2:A2=M2]    means   let x2:A2 = M2 in (let x1:A1 = M1 in N)


 A file  will be  a list of declarations   D1 ... Dn  

 The result will be a -context- as defined below

 The first  problem is to check correctness of a file

 For doing conversion and type-checking, we enlarge   the syntax of terms   with
 closures, variables (and constants when we lock definitions)

  M,V ::= ... |   M r   pp

 (it is also possible but less elegant in Haskell to have a separate
  type of "values";  I will write V, W, ... for terms that are values)

This introduction of "values" is not really necessary for this simple language
but it will be when we add data types and functions defined by cases

environment

  r ::=   ()   |   (r, x=V)   |   D r

  We also have  contexts   that include definitions

   G ::=  () | G[x:A] | G D

 Definition of evaluation

    eval x r  = get x r
    eval (M1 M2) r  = appVal (eval M1 r) (eval M2 r)
    eval U r        = U
    eval ([x:A]M) r = ([x:A]M) r              -- closure
    eval (M D) r    = eval M (D r)

    appVal (([x:A]M)r)  V =  eval M (r,x=V)
    appVal V1 V           =  V1 V


 get x (r,y=V) = V          x = y
 get x (r,y=V) = get x r    x <> y 
 get x (D r) = get x (r,y=V)      with  D = [y:A=M]  and V = Mr
 get x ()    = x
 
-----------------
Without lock/unlock
  
We can then define type checking: G context, M term, V a value

r(G) is the following env: r() = ()    r(G[x:A]) = r(G)     r(G D) = D r(G)

 --so this is like the list of definitions in G
 --the idea is that (r,x=x)   and r  are indistinguishable     

T(G) will be needed for eta-conversion  it records the -type- of the variables declared in G

  G |- M : V

  G |- U : U

  G |- M N : V    if   G |- M -> ([x:A]B)r   and  G |- N : eval A r   and   T(G) |- V = eval B (r, x = eval N r(G)) 

  G |- x : V  if  if T(G) |- getType x G =  V  

  G |- [x:A]M : U  if  G |- A : U  and  G[x:A] |- B : U

  G |- [x:A]M : ([y:B]T)r   if  G |- A : U  and  T(G) |- eval A r(G) = eval B r  and G[x:A] |- M : eval T (r,y=x)

                 -- note that we know that x has not been declared in G

  G |- M D : V     if  G |- D   and G D |- M : V

  G |- [x:A=M]     if  G |- A : U    and   G |- M : eval A r(G)

 we also have type inference

  G |- x -> getType x G

  G |- M N -> eval B (r, eval N r(G))   if   G |- M -> ([x:A]B)r   and  G |- N : eval A r


 We define T(G) the associated context of G as follows

   T() = ()
   T(G[x:A])   = T(G), x : eval A r(G)
   T(G[x:A=M]) = T(G), x : eval A r(G)

 and what is left is definition of  equality of types T(G) |-  V1 = V2 

 First we define  beta-conversion    T(G) |- V1 = V2

    T(G) |- U = U

    T(G) |- M1 N1 = M2 N2      if  T(G) |- M1 = M2  and T(G) |- N1 = N2

    T(G) |- ([x1:A1]B1) r1 = ([x2:A2]B2)r2   if    T(G) |- V = eval A2 r2  and
                                       T(G), x : eval A1 r1 |- eval B1 (r1,x1 = x) = eval B2 (r2,x2 = x) 
				       where x is a fresh variable not declared in T(G)

 The next 2 steps are

   -change beta conversion   to   beta-eta  conversion

   this is actually simple: we check   T(G) |- V1 = V2 : V   and   T(G) |- V1 = V2 -> V

           T(G) |- x = x -> getType x T(G)
	   T(G) |- M1 N1 = M2 N2 -> eval B (r,x = eval r(G) N1)
	        if  T(G) |- M1 = M2 -> ([x:A]B)r  and T(G) |- N1 = N2 : eval A r


           T(G) |- V1 = V2 : ([z:A]B)r   if    T(G), x : eval A r |- eval (V1 x) r(G) = eval (V2 x) r(G) : eval B (r,z=x), x fresh variable
	   T(G) |- ([x1:A1]B1)r1 = ([x2:A2]B2)r2 : U
	          if  T(G) |- eval A1 r1 = eval A2 r2  and T(G), x : eval A1 r1 |- B1(r1,x1=x) = B2(r2,x2=x)
	   T(G) |- V1 = V2 : W            W not closure if  T(G) |- V1 = V2 -> W'  for some W'


  Loading a file produces a context G
  We check the correctness of G as follows

  |- ()

  |- G[x:A]    if   |- G  and G |- A and x not declared in G

  |- G D       if   |- G  and G |- D and D = [x:A=M], x not declared in G



 -add the lock/unlock  mechanism

 The question is:  should locking/unlocking annotations be applied to -definitions- or to -expressions-??

 If we apply it to definitions, here is what one can do

 we introduce a new judgement  G |-xs   M : V

 where xs is a list of unlocked names

 we then define   r(G,xs) as follows

   r( (), xs) = ()
   r(G D, xs) = r(G,xs) D     if  D = [x:A=M] x in xs
   r(G D, xs) = r(G,xs)       if  D = [x:A=M] x notin xs
   r(G[x:A],xs) = r(G,xs)

 and we change everywhere  r(G)  by r(G,xs)

 We then define   G |-xs D   for D = [x : A = M]  by  G |-xs A   and  G |-xs M : eval A r(G,xs)

 -write an interactive evaluation function  with a readback function

 In a context G  we have a value V can be  eval M r(G,xs)   for some xs

 We want to readback V and produces an expression M'  which would be the evaluation of
 M with unlocked constants in xs

 This is as follows let ns = names declared in G (or names specified as unlocked ?)
   R(ns,U) = U
   R(ns,x) = x
   R(ns,V1 V2) = R(ns,V1) R(ns,V2)
   R(ns,([x:A]B)r) =  [z:R(ns, eval A r)] R(z:ns,eval B (r, x=z)) with z = fresh ns