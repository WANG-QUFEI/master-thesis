-----------------------------------------------------------------------------
Info file generated by Happy Version 1.20.0 from Core/Par.y
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_pContext -> Context                         (0)
	%start_pExp -> Exp                                 (1)
	%start_pDecl -> Decl                               (2)
	Id -> L_Id                                         (3)
	Context -> ListDecl                                (4)
	Exp2 -> '*'                                        (5)
	Exp2 -> Ref                                        (6)
	Exp2 -> Ref '[' ListExp ']' '.' Id                 (7)
	Exp2 -> Exp3                                       (8)
	Exp1 -> Exp1 Exp2                                  (9)
	Exp1 -> Exp2                                       (10)
	Exp -> Exp1 '->' Exp                               (11)
	Exp -> '[' Id ':' Exp ']' Exp                      (12)
	Exp -> '[' Id ':' Exp '=' Exp ']' Exp              (13)
	Exp -> Exp1                                        (14)
	Decl -> Id ':' Exp                                 (15)
	Decl -> Id ':' Exp '=' Exp                         (16)
	Decl -> Id '=' 'seg' '{' ListDecl '}'              (17)
	Decl -> Id '=' Ref '[' ListExp ']'                 (18)
	Ref -> Id                                          (19)
	Ref -> Ref '.' Id                                  (20)
	ListDecl ->                                        (21)
	ListDecl -> Decl                                   (22)
	ListDecl -> Decl ';' ListDecl                      (23)
	ListExp ->                                         (24)
	ListExp -> Exp                                     (25)
	ListExp -> Exp ',' ListExp                         (26)
	Exp3 -> '(' Exp ')'                                (27)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'('            { PT _ (TS _ 1) }
	')'            { PT _ (TS _ 2) }
	'*'            { PT _ (TS _ 3) }
	','            { PT _ (TS _ 4) }
	'->'           { PT _ (TS _ 5) }
	'.'            { PT _ (TS _ 6) }
	':'            { PT _ (TS _ 7) }
	';'            { PT _ (TS _ 8) }
	'='            { PT _ (TS _ 9) }
	'['            { PT _ (TS _ 10) }
	']'            { PT _ (TS _ 11) }
	'seg'          { PT _ (TS _ 12) }
	'{'            { PT _ (TS _ 13) }
	'}'            { PT _ (TS _ 14) }
	L_Id           { PT _ (T_Id _) }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_pContext rule  0
	%start_pExp     rule  1
	%start_pDecl    rule  2
	Id              rule  3
	Context         rule  4
	Exp2            rules 5, 6, 7, 8
	Exp1            rules 9, 10
	Exp             rules 11, 12, 13, 14
	Decl            rules 15, 16, 17, 18
	Ref             rules 19, 20
	ListDecl        rules 21, 22, 23
	ListExp         rules 24, 25, 26
	Exp3            rule  27

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0

	%start_pContext -> . Context                        (rule 0)

	L_Id           shift, and enter state 4
	%eof           reduce using rule 21

	Id             goto state 5
	Context        goto state 16
	Decl           goto state 17
	ListDecl       goto state 18

State 1

	%start_pExp -> . Exp                                (rule 1)

	'('            shift, and enter state 13
	'*'            shift, and enter state 14
	'['            shift, and enter state 15
	L_Id           shift, and enter state 4

	Id             goto state 7
	Exp2           goto state 8
	Exp1           goto state 9
	Exp            goto state 10
	Ref            goto state 11
	Exp3           goto state 12

State 2

	%start_pDecl -> . Decl                              (rule 2)

	L_Id           shift, and enter state 4

	Id             goto state 5
	Decl           goto state 6

State 3

	Id -> . L_Id                                        (rule 3)

	L_Id           shift, and enter state 4


State 4

	Id -> L_Id .                                        (rule 3)

	'('            reduce using rule 3
	')'            reduce using rule 3
	'*'            reduce using rule 3
	','            reduce using rule 3
	'->'           reduce using rule 3
	'.'            reduce using rule 3
	':'            reduce using rule 3
	';'            reduce using rule 3
	'='            reduce using rule 3
	'['            reduce using rule 3
	']'            reduce using rule 3
	'}'            reduce using rule 3
	L_Id           reduce using rule 3
	%eof           reduce using rule 3


State 5

	Decl -> Id . ':' Exp                                (rule 15)
	Decl -> Id . ':' Exp '=' Exp                        (rule 16)
	Decl -> Id . '=' 'seg' '{' ListDecl '}'             (rule 17)
	Decl -> Id . '=' Ref '[' ListExp ']'                (rule 18)

	':'            shift, and enter state 26
	'='            shift, and enter state 27


State 6

	%start_pDecl -> Decl .                              (rule 2)

	%eof           accept


State 7

	Ref -> Id .                                         (rule 19)

	'('            reduce using rule 19
	')'            reduce using rule 19
	'*'            reduce using rule 19
	','            reduce using rule 19
	'->'           reduce using rule 19
	'.'            reduce using rule 19
	';'            reduce using rule 19
	'='            reduce using rule 19
	'['            reduce using rule 19
	']'            reduce using rule 19
	'}'            reduce using rule 19
	L_Id           reduce using rule 19
	%eof           reduce using rule 19


State 8

	Exp1 -> Exp2 .                                      (rule 10)

	'('            reduce using rule 10
	')'            reduce using rule 10
	'*'            reduce using rule 10
	','            reduce using rule 10
	'->'           reduce using rule 10
	';'            reduce using rule 10
	'='            reduce using rule 10
	']'            reduce using rule 10
	'}'            reduce using rule 10
	L_Id           reduce using rule 10
	%eof           reduce using rule 10


State 9

	Exp1 -> Exp1 . Exp2                                 (rule 9)
	Exp -> Exp1 . '->' Exp                              (rule 11)
	Exp -> Exp1 .                                       (rule 14)

	'('            shift, and enter state 13
	')'            reduce using rule 14
	'*'            shift, and enter state 14
	','            reduce using rule 14
	'->'           shift, and enter state 25
	';'            reduce using rule 14
	'='            reduce using rule 14
	']'            reduce using rule 14
	'}'            reduce using rule 14
	L_Id           shift, and enter state 4
	%eof           reduce using rule 14

	Id             goto state 7
	Exp2           goto state 24
	Ref            goto state 11
	Exp3           goto state 12

State 10

	%start_pExp -> Exp .                                (rule 1)

	%eof           accept


State 11

	Exp2 -> Ref .                                       (rule 6)
	Exp2 -> Ref . '[' ListExp ']' '.' Id                (rule 7)
	Ref -> Ref . '.' Id                                 (rule 20)

	'('            reduce using rule 6
	')'            reduce using rule 6
	'*'            reduce using rule 6
	','            reduce using rule 6
	'->'           reduce using rule 6
	'.'            shift, and enter state 22
	';'            reduce using rule 6
	'='            reduce using rule 6
	'['            shift, and enter state 23
	']'            reduce using rule 6
	'}'            reduce using rule 6
	L_Id           reduce using rule 6
	%eof           reduce using rule 6


State 12

	Exp2 -> Exp3 .                                      (rule 8)

	'('            reduce using rule 8
	')'            reduce using rule 8
	'*'            reduce using rule 8
	','            reduce using rule 8
	'->'           reduce using rule 8
	';'            reduce using rule 8
	'='            reduce using rule 8
	']'            reduce using rule 8
	'}'            reduce using rule 8
	L_Id           reduce using rule 8
	%eof           reduce using rule 8


State 13

	Exp3 -> '(' . Exp ')'                               (rule 27)

	'('            shift, and enter state 13
	'*'            shift, and enter state 14
	'['            shift, and enter state 15
	L_Id           shift, and enter state 4

	Id             goto state 7
	Exp2           goto state 8
	Exp1           goto state 9
	Exp            goto state 21
	Ref            goto state 11
	Exp3           goto state 12

State 14

	Exp2 -> '*' .                                       (rule 5)

	'('            reduce using rule 5
	')'            reduce using rule 5
	'*'            reduce using rule 5
	','            reduce using rule 5
	'->'           reduce using rule 5
	';'            reduce using rule 5
	'='            reduce using rule 5
	']'            reduce using rule 5
	'}'            reduce using rule 5
	L_Id           reduce using rule 5
	%eof           reduce using rule 5


State 15

	Exp -> '[' . Id ':' Exp ']' Exp                     (rule 12)
	Exp -> '[' . Id ':' Exp '=' Exp ']' Exp             (rule 13)

	L_Id           shift, and enter state 4

	Id             goto state 20

State 16

	%start_pContext -> Context .                        (rule 0)

	%eof           accept


State 17

	ListDecl -> Decl .                                  (rule 22)
	ListDecl -> Decl . ';' ListDecl                     (rule 23)

	';'            shift, and enter state 19
	'}'            reduce using rule 22
	%eof           reduce using rule 22


State 18

	Context -> ListDecl .                               (rule 4)

	%eof           reduce using rule 4


State 19

	ListDecl -> Decl ';' . ListDecl                     (rule 23)

	'}'            reduce using rule 21
	L_Id           shift, and enter state 4
	%eof           reduce using rule 21

	Id             goto state 5
	Decl           goto state 17
	ListDecl       goto state 37

State 20

	Exp -> '[' Id . ':' Exp ']' Exp                     (rule 12)
	Exp -> '[' Id . ':' Exp '=' Exp ']' Exp             (rule 13)

	':'            shift, and enter state 36


State 21

	Exp3 -> '(' Exp . ')'                               (rule 27)

	')'            shift, and enter state 35


State 22

	Ref -> Ref '.' . Id                                 (rule 20)

	L_Id           shift, and enter state 4

	Id             goto state 34

State 23

	Exp2 -> Ref '[' . ListExp ']' '.' Id                (rule 7)

	'('            shift, and enter state 13
	'*'            shift, and enter state 14
	'['            shift, and enter state 15
	']'            reduce using rule 24
	L_Id           shift, and enter state 4

	Id             goto state 7
	Exp2           goto state 8
	Exp1           goto state 9
	Exp            goto state 32
	Ref            goto state 11
	ListExp        goto state 33
	Exp3           goto state 12

State 24

	Exp1 -> Exp1 Exp2 .                                 (rule 9)

	'('            reduce using rule 9
	')'            reduce using rule 9
	'*'            reduce using rule 9
	','            reduce using rule 9
	'->'           reduce using rule 9
	';'            reduce using rule 9
	'='            reduce using rule 9
	']'            reduce using rule 9
	'}'            reduce using rule 9
	L_Id           reduce using rule 9
	%eof           reduce using rule 9


State 25

	Exp -> Exp1 '->' . Exp                              (rule 11)

	'('            shift, and enter state 13
	'*'            shift, and enter state 14
	'['            shift, and enter state 15
	L_Id           shift, and enter state 4

	Id             goto state 7
	Exp2           goto state 8
	Exp1           goto state 9
	Exp            goto state 31
	Ref            goto state 11
	Exp3           goto state 12

State 26

	Decl -> Id ':' . Exp                                (rule 15)
	Decl -> Id ':' . Exp '=' Exp                        (rule 16)

	'('            shift, and enter state 13
	'*'            shift, and enter state 14
	'['            shift, and enter state 15
	L_Id           shift, and enter state 4

	Id             goto state 7
	Exp2           goto state 8
	Exp1           goto state 9
	Exp            goto state 30
	Ref            goto state 11
	Exp3           goto state 12

State 27

	Decl -> Id '=' . 'seg' '{' ListDecl '}'             (rule 17)
	Decl -> Id '=' . Ref '[' ListExp ']'                (rule 18)

	'seg'          shift, and enter state 29
	L_Id           shift, and enter state 4

	Id             goto state 7
	Ref            goto state 28

State 28

	Decl -> Id '=' Ref . '[' ListExp ']'                (rule 18)
	Ref -> Ref . '.' Id                                 (rule 20)

	'.'            shift, and enter state 22
	'['            shift, and enter state 43


State 29

	Decl -> Id '=' 'seg' . '{' ListDecl '}'             (rule 17)

	'{'            shift, and enter state 42


State 30

	Decl -> Id ':' Exp .                                (rule 15)
	Decl -> Id ':' Exp . '=' Exp                        (rule 16)

	';'            reduce using rule 15
	'='            shift, and enter state 41
	'}'            reduce using rule 15
	%eof           reduce using rule 15


State 31

	Exp -> Exp1 '->' Exp .                              (rule 11)

	')'            reduce using rule 11
	','            reduce using rule 11
	';'            reduce using rule 11
	'='            reduce using rule 11
	']'            reduce using rule 11
	'}'            reduce using rule 11
	%eof           reduce using rule 11


State 32

	ListExp -> Exp .                                    (rule 25)
	ListExp -> Exp . ',' ListExp                        (rule 26)

	','            shift, and enter state 40
	']'            reduce using rule 25


State 33

	Exp2 -> Ref '[' ListExp . ']' '.' Id                (rule 7)

	']'            shift, and enter state 39


State 34

	Ref -> Ref '.' Id .                                 (rule 20)

	'('            reduce using rule 20
	')'            reduce using rule 20
	'*'            reduce using rule 20
	','            reduce using rule 20
	'->'           reduce using rule 20
	'.'            reduce using rule 20
	';'            reduce using rule 20
	'='            reduce using rule 20
	'['            reduce using rule 20
	']'            reduce using rule 20
	'}'            reduce using rule 20
	L_Id           reduce using rule 20
	%eof           reduce using rule 20


State 35

	Exp3 -> '(' Exp ')' .                               (rule 27)

	'('            reduce using rule 27
	')'            reduce using rule 27
	'*'            reduce using rule 27
	','            reduce using rule 27
	'->'           reduce using rule 27
	';'            reduce using rule 27
	'='            reduce using rule 27
	']'            reduce using rule 27
	'}'            reduce using rule 27
	L_Id           reduce using rule 27
	%eof           reduce using rule 27


State 36

	Exp -> '[' Id ':' . Exp ']' Exp                     (rule 12)
	Exp -> '[' Id ':' . Exp '=' Exp ']' Exp             (rule 13)

	'('            shift, and enter state 13
	'*'            shift, and enter state 14
	'['            shift, and enter state 15
	L_Id           shift, and enter state 4

	Id             goto state 7
	Exp2           goto state 8
	Exp1           goto state 9
	Exp            goto state 38
	Ref            goto state 11
	Exp3           goto state 12

State 37

	ListDecl -> Decl ';' ListDecl .                     (rule 23)

	'}'            reduce using rule 23
	%eof           reduce using rule 23


State 38

	Exp -> '[' Id ':' Exp . ']' Exp                     (rule 12)
	Exp -> '[' Id ':' Exp . '=' Exp ']' Exp             (rule 13)

	'='            shift, and enter state 49
	']'            shift, and enter state 50


State 39

	Exp2 -> Ref '[' ListExp ']' . '.' Id                (rule 7)

	'.'            shift, and enter state 48


State 40

	ListExp -> Exp ',' . ListExp                        (rule 26)

	'('            shift, and enter state 13
	'*'            shift, and enter state 14
	'['            shift, and enter state 15
	']'            reduce using rule 24
	L_Id           shift, and enter state 4

	Id             goto state 7
	Exp2           goto state 8
	Exp1           goto state 9
	Exp            goto state 32
	Ref            goto state 11
	ListExp        goto state 47
	Exp3           goto state 12

State 41

	Decl -> Id ':' Exp '=' . Exp                        (rule 16)

	'('            shift, and enter state 13
	'*'            shift, and enter state 14
	'['            shift, and enter state 15
	L_Id           shift, and enter state 4

	Id             goto state 7
	Exp2           goto state 8
	Exp1           goto state 9
	Exp            goto state 46
	Ref            goto state 11
	Exp3           goto state 12

State 42

	Decl -> Id '=' 'seg' '{' . ListDecl '}'             (rule 17)

	'}'            reduce using rule 21
	L_Id           shift, and enter state 4

	Id             goto state 5
	Decl           goto state 17
	ListDecl       goto state 45

State 43

	Decl -> Id '=' Ref '[' . ListExp ']'                (rule 18)

	'('            shift, and enter state 13
	'*'            shift, and enter state 14
	'['            shift, and enter state 15
	']'            reduce using rule 24
	L_Id           shift, and enter state 4

	Id             goto state 7
	Exp2           goto state 8
	Exp1           goto state 9
	Exp            goto state 32
	Ref            goto state 11
	ListExp        goto state 44
	Exp3           goto state 12

State 44

	Decl -> Id '=' Ref '[' ListExp . ']'                (rule 18)

	']'            shift, and enter state 55


State 45

	Decl -> Id '=' 'seg' '{' ListDecl . '}'             (rule 17)

	'}'            shift, and enter state 54


State 46

	Decl -> Id ':' Exp '=' Exp .                        (rule 16)

	';'            reduce using rule 16
	'}'            reduce using rule 16
	%eof           reduce using rule 16


State 47

	ListExp -> Exp ',' ListExp .                        (rule 26)

	']'            reduce using rule 26


State 48

	Exp2 -> Ref '[' ListExp ']' '.' . Id                (rule 7)

	L_Id           shift, and enter state 4

	Id             goto state 53

State 49

	Exp -> '[' Id ':' Exp '=' . Exp ']' Exp             (rule 13)

	'('            shift, and enter state 13
	'*'            shift, and enter state 14
	'['            shift, and enter state 15
	L_Id           shift, and enter state 4

	Id             goto state 7
	Exp2           goto state 8
	Exp1           goto state 9
	Exp            goto state 52
	Ref            goto state 11
	Exp3           goto state 12

State 50

	Exp -> '[' Id ':' Exp ']' . Exp                     (rule 12)

	'('            shift, and enter state 13
	'*'            shift, and enter state 14
	'['            shift, and enter state 15
	L_Id           shift, and enter state 4

	Id             goto state 7
	Exp2           goto state 8
	Exp1           goto state 9
	Exp            goto state 51
	Ref            goto state 11
	Exp3           goto state 12

State 51

	Exp -> '[' Id ':' Exp ']' Exp .                     (rule 12)

	')'            reduce using rule 12
	','            reduce using rule 12
	';'            reduce using rule 12
	'='            reduce using rule 12
	']'            reduce using rule 12
	'}'            reduce using rule 12
	%eof           reduce using rule 12


State 52

	Exp -> '[' Id ':' Exp '=' Exp . ']' Exp             (rule 13)

	']'            shift, and enter state 56


State 53

	Exp2 -> Ref '[' ListExp ']' '.' Id .                (rule 7)

	'('            reduce using rule 7
	')'            reduce using rule 7
	'*'            reduce using rule 7
	','            reduce using rule 7
	'->'           reduce using rule 7
	';'            reduce using rule 7
	'='            reduce using rule 7
	']'            reduce using rule 7
	'}'            reduce using rule 7
	L_Id           reduce using rule 7
	%eof           reduce using rule 7


State 54

	Decl -> Id '=' 'seg' '{' ListDecl '}' .             (rule 17)

	';'            reduce using rule 17
	'}'            reduce using rule 17
	%eof           reduce using rule 17


State 55

	Decl -> Id '=' Ref '[' ListExp ']' .                (rule 18)

	';'            reduce using rule 18
	'}'            reduce using rule 18
	%eof           reduce using rule 18


State 56

	Exp -> '[' Id ':' Exp '=' Exp ']' . Exp             (rule 13)

	'('            shift, and enter state 13
	'*'            shift, and enter state 14
	'['            shift, and enter state 15
	L_Id           shift, and enter state 4

	Id             goto state 7
	Exp2           goto state 8
	Exp1           goto state 9
	Exp            goto state 57
	Ref            goto state 11
	Exp3           goto state 12

State 57

	Exp -> '[' Id ':' Exp '=' Exp ']' Exp .             (rule 13)

	')'            reduce using rule 13
	','            reduce using rule 13
	';'            reduce using rule 13
	'='            reduce using rule 13
	']'            reduce using rule 13
	'}'            reduce using rule 13
	%eof           reduce using rule 13


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 28
Number of terminals: 15
Number of non-terminals: 13
Number of states: 58
