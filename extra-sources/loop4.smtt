Pow : * -> * =
  [X : *] X -> * ;

T : * -> * =
  [X : *] Pow (Pow X) ;

⊥ : * = [X : *] X ;

funT : [X : *] [Y : *] (X -> Y) -> T X -> T Y =
  [X : *][Y : *][f : X -> Y][t : T X][g : Y -> *] t ([x : X] g (f x)) ;

¬ : * -> * =
  [X : *] X -> ⊥ ;

U : * = [X : *] (T X -> X) -> T X ;

tau : T U -> U =
  [t : T U][X : *][f : T X -> X] [p : Pow X] t ([x : U] p (f (x X f))) ;

sigma : U -> T U =
  [z : U] z U tau ;

delta : U -> U = [z : U] tau (sigma z) ;

Q : T U =
  [p : U -> *][z : U] sigma z p -> p z ;

B : Pow U =
  [z : U] ¬ ([p : Pow U] sigma z p -> p (delta z)) ;

C : U = tau Q ;

lem1 : Q B
  = [z : U] [k : sigma z B] [l : [p : Pow U] sigma z p -> p (delta z)] l B k ([p : Pow U] l ([z1 : U] p (delta z1))) ;

A : * = [p : Pow U] Q p -> p C ;

lem2 : ¬ A
  = [h : A] h B lem1 ([p : Pow U] h ([z : U] p (delta z))) ;

lem3 : A
  = [p : Pow U] [h : Q p] h C ([x : U] h (delta x)) ;

loop : ⊥
  = lem2 lem3 ;
