-- Haskell module generated by the BNF converter

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module Core.Skel where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified Core.Abs

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transId :: Core.Abs.Id -> Result
transId x = case x of
  Core.Abs.Id string -> failure x

transContext :: Core.Abs.Context -> Result
transContext x = case x of
  Core.Abs.Ctx decls -> failure x

transExp :: Core.Abs.Exp -> Result
transExp x = case x of
  Core.Abs.U -> failure x
  Core.Abs.Var id -> failure x
  Core.Abs.SegVar seg id -> failure x
  Core.Abs.App exp1 exp2 -> failure x
  Core.Abs.Arr exp1 exp2 -> failure x
  Core.Abs.Abs id exp1 exp2 -> failure x
  Core.Abs.Let id exp1 exp2 exp3 -> failure x

transDecl :: Core.Abs.Decl -> Result
transDecl x = case x of
  Core.Abs.Dec id exp -> failure x
  Core.Abs.Def id exp1 exp2 -> failure x
  Core.Abs.DSeg id seg -> failure x

transSeg :: Core.Abs.Seg -> Result
transSeg x = case x of
  Core.Abs.SegDef decls -> failure x
  Core.Abs.SegRef id -> failure x
  Core.Abs.SegInst seg exps -> failure x
  Core.Abs.SegNest seg id -> failure x
