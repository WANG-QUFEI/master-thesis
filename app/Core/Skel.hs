-- Haskell module generated by the BNF converter

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module Core.Skel where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified Core.Abs

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transId :: Core.Abs.Id -> Result
transId x = case x of
  Core.Abs.Id string -> failure x

transContext :: Core.Abs.Context -> Result
transContext x = case x of
  Core.Abs.Ctx cdecls -> failure x

transCExp :: Core.Abs.CExp -> Result
transCExp x = case x of
  Core.Abs.U -> failure x
  Core.Abs.Var id -> failure x
  Core.Abs.ESeg id1 cexps id2 -> failure x
  Core.Abs.App cexp1 cexp2 -> failure x
  Core.Abs.Arr cexp1 cexp2 -> failure x
  Core.Abs.Pi id cexp1 cexp2 -> failure x
  Core.Abs.Where id cexp1 cexp2 cexp3 -> failure x

transCDecl :: Core.Abs.CDecl -> Result
transCDecl x = case x of
  Core.Abs.Dec id cexp -> failure x
  Core.Abs.Def id cexp1 cexp2 -> failure x
  Core.Abs.DSeg id cdecls -> failure x
  Core.Abs.DSegInst id1 id2 cexps -> failure x
