-- Haskell data types for the abstract syntax.
-- Generated by the BNF converter.

{-# LANGUAGE PatternSynonyms #-}

-- | The abstract syntax of language Core.

module Core.Abs where

import Prelude (String)
import qualified Prelude as C
  ( Eq, Ord, Show, Read
  , Int, Maybe(..)
  )

data Context = Ctx [CDecl]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data CExp
    = CU
    | CVar Id
    | CESeg CSeg Id
    | CApp CExp CExp
    | CArr CExp CExp
    | CPi Id CExp CExp
    | CWhere Id CExp CExp CExp
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data CDecl = CDec Id CExp | CDef Id CExp CExp | CDSeg Id CSeg
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data CSeg
    = CSegDecl [CDecl]
    | CSegInsti Id [CExp]
    | CSegInstc CSeg [CExp]
    | CSegSub CSeg Id
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype Id = Id ((C.Int, C.Int), String)
  deriving (C.Eq, C.Ord, C.Show, C.Read)

-- | Start position (line, column) of something.

type BNFC'Position = C.Maybe (C.Int, C.Int)

pattern BNFC'NoPosition :: BNFC'Position
pattern BNFC'NoPosition = C.Nothing

pattern BNFC'Position :: C.Int -> C.Int -> BNFC'Position
pattern BNFC'Position line col = C.Just (line, col)

-- | Get the start position of something.

class HasPosition a where
  hasPosition :: a -> BNFC'Position

instance HasPosition Id where
  hasPosition (Id (p, _)) = C.Just p

